name: Build WPPConnect Mobile - Release (robust)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 90

    env:
      # Increase Node heap for huge dependency trees / bundle
      NODE_OPTIONS: "--max_old_space_size=4096"
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Print runner info (diagnostics)
      run: |
        echo "Runner: $(uname -a)"
        node -v || true
        java -version || true
        pwd
        ls -la

    # --------------------
    # Setup Java 17 (compatible with Gradle 7.x)
    # --------------------
    - name: Setup Java 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    - name: Show java & gradle versions (diagnostics)
      run: |
        java -version
        # gradle will be downloaded by wrapper; show wrapper file
        ls -la android/gradlew || true

    # --------------------
    # Node + npm + caching
    # --------------------
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-cache-${{ runner.os }}-

    - name: Ensure package-lock presence or create lockfile
      id: lockfile
      run: |
        if [ -f package-lock.json ]; then
          echo "lockfile=present" >> $GITHUB_OUTPUT
        else
          echo "No package-lock.json found â€” generating one with npm install (legacy-peer-deps)"
          npm install --legacy-peer-deps
          git config --global user.name "github-actions[bot]" || true
          git config --global user.email "actions@github.com" || true
          # Do NOT push by default. We output a warning so maintainers may commit lockfile manually.
          if [ -f package-lock.json ]; then
            echo "::warning file=package-lock.json::package-lock.json was generated in CI. Commit it locally to get reproducible builds."
            echo "lockfile=generated" >> $GITHUB_OUTPUT
          else
            echo "::error ::Failed to generate package-lock.json in CI"
            exit 1
          fi
        fi

    - name: Install npm dependencies (deterministic when lockfile present)
      run: |
        if [ -f package-lock.json ]; then
          echo "Using npm ci (deterministic)"
          npm ci --legacy-peer-deps
        else
          echo "Falling back to npm install --legacy-peer-deps"
          npm install --legacy-peer-deps
        fi

    - name: Show installed node_modules sizes (diagnostics)
      run: du -sh node_modules || true

    # --------------------
    # Android SDK: accept licenses + ensure build-tools + platform are present
    # --------------------
    - name: Ensure Android SDK packages
      run: |
        set -e
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        # Install commonly required packages (adjust API level as needed)
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

    # --------------------
    # Keystore handling: decode and create key.properties
    # --------------------
    - name: Decode keystore and create key.properties
      run: |
        mkdir -p android
        echo "$RELEASE_KEYSTORE_BASE64" | base64 --decode > android/release-key.jks
        chmod 600 android/release-key.jks
        cat > android/key.properties <<EOF
storeFile=release-key.jks
storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
keyAlias=${{ secrets.RELEASE_KEY_ALIAS }}
keyPassword=${{ secrets.RELEASE_KEY_PASSWORD }}
EOF
        echo "Wrote android/release-key.jks and android/key.properties"
      env:
        RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}

    - name: Print keystore fingerprint (diagnostic)
      run: |
        keytool -list -v -keystore android/release-key.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" || true

    # --------------------
    # Make Gradle wrapper executable
    # --------------------
    - name: Ensure gradlew executable
      run: chmod +x ./android/gradlew

    # --------------------
    # (Optional) Prebundle RN JS & assets if Gradle bundling fails
    # --------------------
    - name: Create assets dir for bundle
      run: mkdir -p android/app/src/main/assets android/app/src/main/res || true

    - name: Prebundle react-native assets (safe: only runs if rn bundle exists)
      run: |
        set -e
        if command -v npx >/dev/null 2>&1; then
          echo "Running react-native bundle to generate JS bundle and assets (ensures native_modules.io will find assets)"
          npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res || echo "bundle step returned non-zero; Gradle may still handle bundling"
        else
          echo "npx not available; skipping prebundle"
        fi

    # --------------------
    # Clean old builds (avoid stale caches)
    # --------------------
    - name: Clean Android
      run: |
        cd android
        ./gradlew clean || true

    # --------------------
    # Build with detailed logging and fail diagnostics
    # --------------------
    - name: Assemble Release APK (with diagnostics)
      shell: bash
      env:
        RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
        RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
        RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
      run: |
        set -euxo pipefail
        cd android
        echo "Running ./gradlew assembleRelease --no-daemon --stacktrace --info"
        ./gradlew assembleRelease --no-daemon --stacktrace --info \
          -Pandroid.injected.signing.store.file=$PWD/release-key.jks \
          -Pandroid.injected.signing.store.password="$RELEASE_KEYSTORE_PASSWORD" \
          -Pandroid.injected.signing.key.alias="$RELEASE_KEY_ALIAS" \
          -Pandroid.injected.signing.key.password="$RELEASE_KEY_PASSWORD"

    # --------------------
    # Upload the artifact (APK/AAB)
    # --------------------
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: wppconnect-release-apk
        path: android/app/build/outputs/apk/release/*.apk

    # --------------------
    # Post-build diagnostics for maintainers (only runs if artifact missing)
    # --------------------
    - name: Post-build diagnostic summary (if build failed to produce APK)
      if: always()
      run: |
        echo "=== Build output listing ==="
        ls -la android/app/build/outputs || true
        echo "=== Gradle logs (last 200 lines) ==="
        if [ -f android/gradle.properties ]; then
          tail -n 200 android/app/build/outputs/**/*.log || true
        fi
