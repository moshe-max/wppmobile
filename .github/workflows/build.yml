name: Build WPPConnect Mobile

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "20"
      JAVA_VERSION: "17"
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      NODE_OPTIONS: "--max_old_space_size=4096"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Upgrade npm
        run: npm install -g npm@latest

      - name: Install dependencies
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            npm ci --legacy-peer-deps
          else
            npm install --legacy-peer-deps
          fi

      - name: Ensure compatible RN SVG & QR code libs (no-save)
        shell: bash
        run: |
          # attempt to satisfy runtime peer deps without editing package.json
          npm install react-native-svg@^14.8.0 --no-save --legacy-peer-deps || true
          npm install react-native-qrcode-svg@^6.3.15 --no-save --legacy-peer-deps || true

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: (Optional) Ensure Android SDK packages
        shell: bash
        run: |
          # best-effort: install platform-tools, platforms and build-tools if sdkmanager is available
          if [ -x "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$ANDROID_HOME/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER="$ANDROID_HOME/cmdline-tools/bin/sdkmanager"
          else
            SDKMANAGER=""
          fi
          if [ -n "$SDKMANAGER" ]; then
            yes | $SDKMANAGER "platform-tools" "platforms;android-33" "build-tools;33.0.2" >/dev/null || true
          fi

      - name: Decode release keystore (safe)
        shell: bash
        env:
          # pass secret into env for runtime check in shell (avoid step-level secret conditionals)
          RELEASE_KEYSTORE_BASE64: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          if [ -n "${RELEASE_KEYSTORE_BASE64:-}" ]; then
            echo "Decoding keystore into android/release-key.jks"
            mkdir -p android
            echo "${RELEASE_KEYSTORE_BASE64}" | base64 --decode > android/release-key.jks
            chmod 600 android/release-key.jks
            # write key.properties in case your Gradle build reads it
            cat > android/key.properties <<EOF
storeFile=release-key.jks
storePassword=${RELEASE_KEYSTORE_PASSWORD:-}
keyAlias=${RELEASE_KEY_ALIAS:-}
keyPassword=${RELEASE_KEY_PASSWORD:-}
EOF
          else
            echo "No RELEASE_KEYSTORE_BASE64 secret provided — will build without signing (unsigned release)."
          fi

      - name: Make gradlew executable
        shell: bash
        run: chmod +x android/gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Release APK
        shell: bash
        working-directory: android
        env:
          RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          echo "Building from: $(pwd)"
          ./gradlew clean
          if [ -f release-key.jks ]; then
            echo "Found release-key.jks — building signed release"
            ./gradlew assembleRelease \
              -Pandroid.injected.signing.store.file=$PWD/release-key.jks \
              -Pandroid.injected.signing.store.password="${RELEASE_KEYSTORE_PASSWORD}" \
              -Pandroid.injected.signing.key.alias="${RELEASE_KEY_ALIAS}" \
              -Pandroid.injected.signing.key.password="${RELEASE_KEY_PASSWORD}"
          else
            echo "No release keystore found — building release (unsigned) to produce APK for QA"
            ./gradlew assembleRelease
          fi

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wppconnect-release-apks
          path: android/app/build/outputs/apk/*/release/*.apk
